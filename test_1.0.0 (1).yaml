swagger: '2.0'
info:
  version: 1.0.0
  title: test
  x-ibm-name: test
basePath: /test
x-ibm-configuration:
  properties:
    target-url:
      description: URL of the proxy policy
      encoded: false
      value: https://www.example.com
  cors:
    enabled: true
  gateway: datapower-api-gateway
  type: rest
  phase: realized
  enforced: true
  testable: true
  assembly:
    execute:
      - switch:
          version: 2.0.0
          title: switch
          case:
            - condition: request.headers.ID = "true"
              execute:
                - invoke:
                    title: invoke
                    version: 2.0.0
                    verb: keep
                    target-url: https://api.agify.io?name=meelad
                    follow-redirects: false
                    timeout: 60
                    parameter-control:
                      type: blocklist
                      values: []
                    header-control:
                      type: blocklist
                      values: []
                    inject-proxy-headers: true
                    persistent-connection: true
            - condition: request.headers.IDE = "true"
              execute:
                - invoke:
                    version: 2.2.0
                    title: invoke
                    backend-type: detect
                    header-control:
                      type: blocklist
                      values: []
                    parameter-control:
                      type: allowlist
                      values: []
                    http-version: HTTP/1.1
                    timeout: 60
                    verb: keep
                    chunked-uploads: true
                    persistent-connection: true
                    cache-response: protocol
                    cache-ttl: 900
                    stop-on-error: []
                    graphql-send-type: detect
                    websocket-upgrade: false
                    target-url: https://official-joke-api.appspot.com/random_joke
      - parse:
          version: 2.1.0
          title: parse
          parse-settings-reference:
            default: apic-default-parsesettings
      - switch:
          version: 2.0.0
          title: switch
          case:
            - condition: request.headers.ABC = "true"
              execute:
                - json-to-xml:
                    version: 2.0.0
                    title: json-to-xml
                    root-element-name: json
                    always-output-root-element: false
                    unnamed-element-name: element
            - condition: request.headers.DEF= "true"
              execute:
                - xml-to-json:
                    version: 2.0.0
                    title: xml-to-json
      - switch:
          version: 2.0.0
          title: switch
          case:
            - condition: request.headers.J5 = "true"
              execute:
                - invoke:
                    version: 2.2.0
                    title: invoke
                    backend-type: detect
                    header-control:
                      type: blocklist
                      values: []
                    parameter-control:
                      type: allowlist
                      values: []
                    http-version: HTTP/1.1
                    timeout: 60
                    verb: keep
                    chunked-uploads: true
                    persistent-connection: true
                    cache-response: protocol
                    cache-ttl: 900
                    stop-on-error: []
                    graphql-send-type: detect
                    websocket-upgrade: false
                    target-url: https://www.google.com/xyz
                - throw:
                    version: 2.1.0
                    title: InternalServerError
                    name: InternalServerError
                    error-status-code: '500'
                    message: Server not responding
            - condition: request.headers.J4= "true"
              execute:
                - invoke:
                    version: 2.2.0
                    title: invoke
                    backend-type: detect
                    header-control:
                      type: blocklist
                      values: []
                    parameter-control:
                      type: allowlist
                      values: []
                    http-version: HTTP/1.1
                    timeout: 60
                    verb: keep
                    chunked-uploads: true
                    persistent-connection: true
                    cache-response: protocol
                    cache-ttl: 900
                    stop-on-error: []
                    graphql-send-type: detect
                    websocket-upgrade: false
                    target-url: https://www.google.com/xyz
                - throw:
                    version: 2.1.0
                    title: Unauthorized
                    name: UnauthorizedError
                    error-status-code: '404'
                    message: Something went wrong
      - switch:
          version: 2.0.0
          title: switch
          case:
            - condition: request.headers.X5 = "true"
              execute:
                - invoke:
                    version: 2.2.0
                    title: invoke
                    backend-type: detect
                    header-control:
                      type: blocklist
                      values: []
                    parameter-control:
                      type: allowlist
                      values: []
                    http-version: HTTP/1.1
                    timeout: 60
                    verb: keep
                    chunked-uploads: true
                    persistent-connection: true
                    cache-response: protocol
                    cache-ttl: 900
                    stop-on-error: []
                    graphql-send-type: detect
                    websocket-upgrade: false
                    target-url: https://www.google.com/xyz
                - throw:
                    version: 2.1.0
                    title: throw
                    name: ServerErrror
                    error-status-code: '500'
                    message: ''
            - condition: request.headers.X4 = "true"
              execute:
                - invoke:
                    version: 2.2.0
                    title: invoke
                    backend-type: detect
                    header-control:
                      type: blocklist
                      values: []
                    parameter-control:
                      type: allowlist
                      values: []
                    http-version: HTTP/1.1
                    timeout: 60
                    verb: keep
                    chunked-uploads: true
                    persistent-connection: true
                    cache-response: protocol
                    cache-ttl: 900
                    stop-on-error: []
                    graphql-send-type: detect
                    websocket-upgrade: false
                    target-url: https://www.google.com/xyz
                - throw:
                    version: 2.1.0
                    title: throw
                    error-status-code: ''
                    name: AccessError
      - switch:
          version: 2.0.0
          title: switch
          case:
            - condition: ($header("Content-Type1") = "application/xml")
              execute:
                - gatewayscript:
                    version: 2.0.0
                    title: gatewayscript
                    source: "var apim = require('apim');\r\n\r\nvar reqHead = apim.getvariable('request.headers');\r\n//var b = valueOf(x-ibm-client-id);\r\ntry {\r\n    \r\n    if (reqHead.client!== '1234' || reqHead.secret!=='1234')\r\n        throw \"UnauthorisedError\";\r\n\r\n        \r\n}\r\ncatch (err) {\r\n  if (err == \"UnauthorisedError\")\r\n    session.output.write('<root><errorMessage>client id or secret is wrong></errorMessage></root>');\r\n    //if (err == \"EmptyErrorError\")\r\n    //session.output.write('{\"errorMessage\": \"client id is missing \"}');\r\n    \r\n    \r\n//apim.output('application/json');\r\napim.output('application/xml');\r\napim.setvariable('message.status.code', 401);\r\n}"
                - parse:
                    version: 2.1.0
                    title: parse
                    parse-settings-reference:
                      default: apic-default-parsesettings
                - xml-to-json:
                    version: 2.0.0
                    title: xml-to-json
                - gatewayscript:
                    version: 2.0.0
                    title: Validation
                    source: "/*\r\nvar converter = require('json-xml-converter');\r\nvar hm = require('header-metadata');\r\n\r\nsession.input.readAsXML(function (error, xml) {\r\n    if (error) {\r\n        session.reject(\"Document contains Invalid XML. Can not convert XML to JSON with Invalid XML.\");\r\n    }else{\r\n        var xmlString = XML.stringify(xml);\r\n        var xmlDOM = XML.parse(xmlString);\r\n        console.debug(\"Converting XML to JSON\");\r\n        var json = converter.toJSON(\"badgerfish\", xmlDOM)\r\n        var headers = hm.current;\r\n        headers.set('Content-Type', 'application/json');\r\n        session.output.write(json);\r\n    }\r\n});\r\n*/\r\n\r\n/*\r\nvar req = apim.getvariable('request.body');\r\n\r\nvar reqString = XML.stringify(req);\r\nvar reqDOM = XML.parse(reqString);\r\n\r\n//var reqNL = reqDom.getElementsByTagName(\"name\");\r\n\r\napim.setvariable('message.body', reqDOM);\r\n*/\r\n\r\nvar apim = require('apim');\r\n\r\nvar reqBody = apim.getvariable('message.body');\r\n\r\ntry {\r\n    \r\n    if (!reqBody.root.name.$)\r\n        throw \"nameEmptyError\";\r\n    if (!reqBody.root.age.$ && reqBody.root.age.$ !== 0)\r\n        throw \"ageEmptyError\";\r\n    if (isNaN(reqBody.root.age.$))\r\n        throw \"ageNaNError\";\r\n}\r\n\r\ncatch (err) {\r\n    if(apim.getvariable('request.headers.accept') == 'application/json') {\r\n        if (err == \"nameEmptyError\")\r\n            session.output.write('{\"errorMessage\": \"Name cannot be null or empty\"}');\r\n        if (err == \"ageEmptyError\")\r\n            session.output.write('{\"errorMessage\": \"Age cannot be null or empty\"}');\r\n        if (err == \"ageNaNError\")\r\n            session.output.write('{\"errorMessage\": \"Age must be a number\"}');\r\n        apim.output('application/json');\r\n    }\r\n   else {\r\n        if (err == \"nameEmptyError\")\r\n            session.output.write('<root><errorMessage>Name cannot be null or empty</errorMessage></root>');\r\n        if (err == \"ageEmptyError\")\r\n            session.output.write('<root><errorMessage>Age cannot be null or empty</errorMessage></root>');\r\n        if (err == \"ageNaNError\")\r\n            session.output.write('<root><errorMessage>Age must be a number</errorMessage></root>');\r\n        apim.output('application/xml');\r\n   }\r\n\r\n  apim.setvariable('message.status.code', 400);\r\n\r\n}\r\n\r\napim.setvariable('message.headers.inXML', 'yes');"
            - condition: ($header("Content-Type") = "application/json")
              execute:
                - gatewayscript:
                    version: 2.0.0
                    title: client_gatewayscript
                    source: "var apim = require('apim');\r\n\r\nvar reqHead = apim.getvariable('request.headers');\r\n//var b = valueOf(x-ibm-client-id);\r\ntry {\r\n    \r\n    if (reqHead.client!== '1234' || reqHead.secret!=='1234')\r\n        throw \"UnauthorisedError\";\r\n\r\n        \r\n}\r\ncatch (err) {\r\n  if (err == \"UnauthorisedError\")\r\n    session.output.write('{\"errorMessage\": \"client id or secret is wrong \"}');\r\n    //if (err == \"EmptyErrorError\")\r\n    //session.output.write('{\"errorMessage\": \"client id is missing \"}');\r\n    \r\n    \r\napim.output('application/json');\r\n//apim.output('application/xml');\r\napim.setvariable('message.status.code', 401);\r\n}"
                - parse:
                    version: 2.1.0
                    title: parse
                    parse-settings-reference:
                      default: apic-default-parsesettings
                - json-to-xml:
                    version: 2.0.0
                    title: json-to-xml
                    root-element-name: json
                    always-output-root-element: false
                    unnamed-element-name: element
                - gatewayscript:
                    version: 2.0.0
                    title: JSON_Validation
                    source: "var apim = require('apim');\r\n\r\nvar reqBody = apim.getvariable('request.body');\r\n\r\n/*reqBody.name = \"Modified\";\r\nsession.output.write(reqBody);\r\napim.output('application/json');*/\r\n\r\ntry {\r\n    \r\n    if (!reqBody.name)\r\n        throw \"nameEmptyError\";\r\n    if (!reqBody.age && reqBody.age !== 0)\r\n        throw \"ageEmptyError\";\r\n    if (reqBody.age == 0)\r\n        throw \"ageZeroError\";\r\n    if (isNaN(reqBody.age))\r\n        throw \"ageNaNError\";\r\n}\r\n\r\ncatch (err) {\r\n    if(apim.getvariable('request.headers.accept') == 'application/json') {\r\n        if (err == \"nameEmptyError\")\r\n            session.output.write('{\"errorMessage\": \"Name cannot be null or empty\"}');\r\n        if (err == \"ageEmptyError\")\r\n            session.output.write('{\"errorMessage\": \"Age cannot be null or empty\"}');\r\n        if (err == \"ageZeroError\")\r\n            session.output.write('{\"errorMessage\": \"Age cannot be zero and mustbe  greater than zero\"}');\r\n        if (err == \"ageNaNError\")\r\n            session.output.write('{\"errorMessage\": \"Age must be a number\"}');\r\n        apim.output('application/json');\r\n    }\r\n   else {\r\n        if (err == \"nameEmptyError\")\r\n            session.output.write('<root><errorMessage>Name cannot be null or empty</errorMessage></root>');\r\n        if (err == \"ageEmptyError\")\r\n            session.output.write('<root><errorMessage>Age cannot be null or empty</errorMessage></root>');\r\n        if (err == \"ageZeroError\")\r\n            session.output.write('<root><errorMessage>Age cannot be zero and mustbe  greater than zero</errorMessage></root>');\r\n        if (err == \"ageNaNError\")\r\n            session.output.write('<root><errorMessage>Age must be a number</errorMessage></root>');\r\n        apim.output('application/xml');\r\n   }\r\n\r\n  apim.setvariable('message.status.code', 400);\r\n\r\n}"
      - switch:
          version: 2.0.0
          title: switch
          case:
            - condition: 'false'
              execute: []
    finally: []
    catch:
      - errors:
          - InternalServerError
        execute:
          - map:
              version: 2.0.0
              title: map
              inputs: {}
              outputs:
                output:
                  schema:
                    description: ''
                    type: object
                    properties:
                      errorMessage:
                        type: string
                        name: errorMessage
                    example: '{"errorMessage":"Server not responding"}'
                  variable: message.body
                  content: application/json
                output_1:
                  schema:
                    type: string
                  variable: message.status.code
              actions:
                - set: output_1
                  default: '500'
                - set: output.errorMessage
                  default: Server not responding
      - errors:
          - UnauthorizedError
        execute:
          - map:
              version: 2.0.0
              title: map
              inputs: {}
              outputs:
                output:
                  schema:
                    description: ''
                    type: object
                    properties:
                      errorMessage:
                        type: string
                        name: errorMessage
                    example: '{"errorMessage":"some thing went wrong "}'
                  variable: message.body
                  content: application/json
                output_1:
                  schema:
                    type: string
                  variable: message.status.code
              actions:
                - set: output.errorMessage
                  default: someo thing went wrong
                - set: output_1
                  default: '404'
      - errors:
          - ServerErrror
        execute:
          - map:
              version: 2.0.0
              title: map
              inputs: {}
              outputs:
                output:
                  schema:
                    description: ''
                    type: object
                    properties:
                      root:
                        type: object
                        properties:
                          ErrorMessage:
                            type: string
                            name: ErrorMessage
                        xml:
                          namespace: ''
                        name: root
                    xml:
                      namespace: ''
                    example: |-
                      <root>
                          <ErrorMessage>Server not responding</ErrorMessage>
                      </root>
                  variable: message.body
                  content: application/xml
                output_1:
                  schema:
                    type: string
                  variable: message.status.code
              actions:
                - set: output.root.ErrorMessage
                  default: Server not responding
                - set: output_1
                  default: '500'
      - errors:
          - AccessError
        execute:
          - map:
              version: 2.0.0
              title: map
              inputs: {}
              outputs:
                output:
                  schema:
                    description: ''
                    type: object
                    properties:
                      root:
                        type: object
                        properties:
                          ErroMessage:
                            type: string
                            name: ErroMessage
                        xml:
                          namespace: ''
                        name: root
                    xml:
                      namespace: ''
                    example: |-
                      <root>
                          <ErroMessage>URL not found</ErroMessage>
                      </root>
                  variable: message.body
                  content: application/xml
                output_1:
                  schema:
                    type: string
                  variable: message.status.code
              actions:
                - set: output.root.ErroMessage
                  default: URL not found
                - set: output_1
                  default: '404'
  activity-log:
    enabled: true
    success-content: activity
    error-content: payload
paths:
  /:
    get:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    post:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
securityDefinitions:
  clientID:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
security:
  - clientID: []
schemes:
  - https
